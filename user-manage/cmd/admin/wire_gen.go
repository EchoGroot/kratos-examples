// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/EchoGroot/kratos-examples/user-manage/internal/admin/biz"
	"github.com/EchoGroot/kratos-examples/user-manage/internal/admin/conf"
	"github.com/EchoGroot/kratos-examples/user-manage/internal/admin/data"
	"github.com/EchoGroot/kratos-examples/user-manage/internal/admin/server"
	"github.com/EchoGroot/kratos-examples/user-manage/internal/admin/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	db, cleanup, err := data.NewData(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(db)
	userUsecase := biz.NewUserUsecase(userRepo)
	userService := service.NewUserService(userUsecase)
	livezService := service.NewLivezService()
	httpServer := server.NewHTTPServer(bootstrap, userService, livezService, logger)
	grpcServer := server.NewGRPCServer(bootstrap, userService, logger)
	app := newApp(httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
